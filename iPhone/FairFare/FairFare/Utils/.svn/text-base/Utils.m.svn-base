
#import "Utils.h"
#import "AppDelegate.h"
#import "DBHandler.h"
#import "Macros.h"
#import "HttpConstants.h"
#import "NSFileManager+DirectoryLocations.h"
#import "NSMutableData-AES.h"
#import "NSString+HTML.h"
#import "NSString+XMLEntities.h"
#import "ResourceCacher.h"

@implementation Utils

/**********************************************************
 Sets the title of a UINavigationController instance
 **********************************************************/

+ (void)deleteA3CreatorLogFile
{
    DebugLog();
    
    NSString *path =[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) objectAtIndex:0];
    NSString *logFilePath = [path stringByAppendingPathComponent:@"log.txt"];
    NSFileManager *manager = [NSFileManager defaultManager];
    
    if([manager fileExistsAtPath:logFilePath]){
        
         NSError *error = NULL;
        [[NSFileManager defaultManager] removeItemAtPath:logFilePath error:&error];    
    }
}

/**********************************************************
 Clears NSUserDefault prefs for the user on logOut
 ***********************************************************/

+ (void)logOut;
{
    DebugLog();
    
    //Clear NSUserDefaults
    NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
    [defaults removeObjectForKey:kIsLoggedIn];
    [defaults removeObjectForKey:kIsSubscriptionAlertTurnedOff];
    [defaults synchronize];
    
    //Set up LoginViewController;
    AppDelegate *delegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
    [delegate setUpLoginViewController];
}

/**********************************************************
 Clears NSUserDefault prefs for the user on unlink and
 wipes out the db.
 **********************************************************/

+ (void)unlink;
{
    DebugLog();
    
    //Clear NSUserDefaults
    NSUserDefaults *defaults=[NSUserDefaults standardUserDefaults];
    [defaults removeObjectForKey:kIsLoggedIn];
    [defaults removeObjectForKey:kIsSubscriptionAlertTurnedOff];
    [defaults removeObjectForKey:kScreenname];
    [defaults removeObjectForKey:kUsername];
    [defaults removeObjectForKey:kPassword];
    [defaults removeObjectForKey:kIsSyncEnabled];
    [defaults synchronize];
    
    //Delete all cached resources
    [[ResourceCacher sharedInstance] flushCache];
    
    //Delete user account specific data
    [[DBHandler sharedInstance] deleteAllUserData];
    
    //Set up LoginViewController;
    AppDelegate *delegate = (AppDelegate *)[[UIApplication sharedApplication] delegate];
    [delegate setUpLoginViewController];
}

/**********************************************************
 Get rootViewController for present modals
 **********************************************************/

+ (UIViewController *)getRootViewController
{
    DebugLog();
    
    UIWindow *window = [[UIApplication sharedApplication] keyWindow];
    return [window rootViewController];
}

/**********************************************************
 Sets the title of a UINavigationController instance
 **********************************************************/

+ (void)navigationController:(UINavigationController *)navController setTitle:(NSString *)title
{
    DebugLog();
    
    navController.navigationBar.topItem.title = title;
}

/**********************************************************
 Returns the height of the label.
 text: is the text to be set as label text
 fontSize: is the size of font
 labelSize: is the CGSize of label
 **********************************************************/

+ (CGFloat)heightForLabelWithText:(NSString *)text fontSize:(CGFloat)fontSize labelSize:(CGSize)labelSize
{
    DebugLog();

    CGFloat height = 0.0f;
    
    if (SYSTEM_VERSION_GREATER_THAN_OR_EQUAL_TO(@"6.0")) {//UILineBreakModeWordWrap deprecated in iOS 6.0. Hence using NSLineBreakByWordWrapping
        height += ceilf([text sizeWithFont:[UIFont systemFontOfSize:fontSize] constrainedToSize:CGSizeMake(labelSize.width, CGFLOAT_MAX) lineBreakMode:NSLineBreakByWordWrapping].height);
    }
    else{
        height += ceilf([text sizeWithFont:[UIFont systemFontOfSize:fontSize] constrainedToSize:CGSizeMake(labelSize.width, CGFLOAT_MAX) lineBreakMode:UILineBreakModeWordWrap].height);
    }
    return height;
}

/**********************************************************
 Returns a bool confirming internet connection.
 We typically check for this before making a fresh request 
 to avoid hold ups due to no network.
 **********************************************************/

+ (BOOL)isConnectedToInternet
{
    DebugLog();

    return (*[(AppDelegate *)[[UIApplication sharedApplication] delegate] isInternetAvailable]);
}

/**********************************************************
 Returns isInternetAvailable BOOL pointer 
 **********************************************************/

+ (BOOL *)isInternetAvailablePointer
{
    DebugLog();

    return [(AppDelegate *)[[UIApplication sharedApplication] delegate] isInternetAvailable];
}

/**********************************************************
 Displays an alert message
 **********************************************************/

+ (void)showAlertMessage:(NSString *)message
{	    
    DebugLog();
        
    UIAlertView *alert = [[[UIAlertView alloc] initWithTitle:Application_Name message:message delegate:nil cancelButtonTitle:@"OK" otherButtonTitles:nil, nil] autorelease];
    [alert show];
}

/**********************************************************
 Encrypts given string. We normally ecrypt values to be 
 stored in NSUserDefaults as they can be accessed 
 and misused
***********************************************************/

+ (NSData*)encryptVal:(NSString *)val
{
    DebugLog();
    
    NSMutableData *valData = [[val dataUsingEncoding:NSUTF8StringEncoding] mutableCopy];
    NSData *encryptedValData = [valData EncryptAES:Utils_EncryptionKey];
    [valData release];
    return encryptedValData;
}

+ (NSString *)decryptValForKey:(NSString *)key
{
    DebugLog();
    
    NSUserDefaults *userDefaults = [NSUserDefaults standardUserDefaults];
    
    if(![userDefaults objectForKey:key])
    return nil;
    
    NSData *decryptData = [userDefaults objectForKey:key];
    NSMutableData *retVal = [decryptData mutableCopy];
    NSData *decrypted = [retVal DecryptAES:Utils_EncryptionKey];
    NSString *retValString = [[[NSString alloc] initWithData:decrypted
                                                    encoding:NSUTF8StringEncoding] autorelease];
    [retVal release];
    return retValString;
}

/**********************************************************
Registers the device for push notification. We call this 
method and get APNS token as a callback in our Appdelegate
instance which we can then send to server which will be 
used to schedule notifications for this device via Apple
Push Notification Service(APNS)
***********************************************************/

+ (void)registerForAPNS
{
    DebugLog();
    
    [[UIApplication sharedApplication] registerForRemoteNotificationTypes:
     (UIRemoteNotificationTypeBadge | UIRemoteNotificationTypeSound | UIRemoteNotificationTypeAlert)];
}

/***************************************************************************************
 Image orientation management
 Sources:
 http://stackoverflow.com/questions/10600613/ios-image-orientation-has-strange-behavior
 https://discussions.apple.com/thread/1537011?start=0&tstart=0
 ***************************************************************************************/

+ (UIImage *)scaleAndRotateImage:(UIImage *)image
{
    int kMaxResolution = IMG_WIDTH;
    
    CGImageRef imgRef = image.CGImage;
    
    CGFloat width = CGImageGetWidth(imgRef);
    CGFloat height = CGImageGetHeight(imgRef);
    
    CGAffineTransform transform = CGAffineTransformIdentity;
    CGRect bounds = CGRectMake(0, 0, width, height);
    
    if (width > kMaxResolution || height > kMaxResolution) {
        CGFloat ratio = width/height;
        if (ratio > 1) {
            bounds.size.width = kMaxResolution;
            bounds.size.height = bounds.size.width / ratio;
        }
        else {
            bounds.size.height = kMaxResolution;
            bounds.size.width = bounds.size.height * ratio;
        }
    }
    
    CGFloat scaleRatio = bounds.size.width / width;
    CGSize imageSize = CGSizeMake(CGImageGetWidth(imgRef), CGImageGetHeight(imgRef));
    CGFloat boundHeight;
    UIImageOrientation orient = image.imageOrientation;
    
    switch(orient) {
            
        case UIImageOrientationUp: //EXIF = 1
            transform = CGAffineTransformIdentity;
            break;
            
        case UIImageOrientationUpMirrored: //EXIF = 2
            transform = CGAffineTransformMakeTranslation(imageSize.width, 0.0);
            transform = CGAffineTransformScale(transform, -1.0, 1.0);
            break;
            
        case UIImageOrientationDown: //EXIF = 3
            transform = CGAffineTransformMakeTranslation(imageSize.width, imageSize.height);
            transform = CGAffineTransformRotate(transform, M_PI);
            break;
            
        case UIImageOrientationDownMirrored: //EXIF = 4
            transform = CGAffineTransformMakeTranslation(0.0, imageSize.height);
            transform = CGAffineTransformScale(transform, 1.0, -1.0);
            break;
            
        case UIImageOrientationLeftMirrored: //EXIF = 5
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            transform = CGAffineTransformMakeTranslation(imageSize.height, imageSize.width);
            transform = CGAffineTransformScale(transform, -1.0, 1.0);
            transform = CGAffineTransformRotate(transform, 3.0 * M_PI / 2.0);
            break;
            
        case UIImageOrientationLeft: //EXIF = 6
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            transform = CGAffineTransformMakeTranslation(0.0, imageSize.width);
            transform = CGAffineTransformRotate(transform, 3.0 * M_PI / 2.0);
            break;
            
        case UIImageOrientationRightMirrored: //EXIF = 7
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            transform = CGAffineTransformMakeScale(-1.0, 1.0);
            transform = CGAffineTransformRotate(transform, M_PI / 2.0);
            break;
            
        case UIImageOrientationRight: //EXIF = 8
            boundHeight = bounds.size.height;
            bounds.size.height = bounds.size.width;
            bounds.size.width = boundHeight;
            transform = CGAffineTransformMakeTranslation(imageSize.height, 0.0);
            transform = CGAffineTransformRotate(transform, M_PI / 2.0);
            break;
            
        default:
            [NSException raise:NSInternalInconsistencyException format:@"Invalid image orientation"];
    }
    
    UIGraphicsBeginImageContext(bounds.size);
    
    CGContextRef context = UIGraphicsGetCurrentContext();
    
    if (orient == UIImageOrientationRight || orient == UIImageOrientationLeft) {
        CGContextScaleCTM(context, -scaleRatio, scaleRatio);
        CGContextTranslateCTM(context, -height, 0);
    }
    else {
        CGContextScaleCTM(context, scaleRatio, -scaleRatio);
        CGContextTranslateCTM(context, 0, -height);
    }
    
    CGContextConcatCTM(context, transform);
    
    CGContextDrawImage(UIGraphicsGetCurrentContext(), CGRectMake(0, 0, width, height), imgRef);
    UIImage *imageCopy = UIGraphicsGetImageFromCurrentImageContext();
    UIGraphicsEndImageContext();
    
    return imageCopy;
}

/**********************************************************
 Gets DB Version
***********************************************************/

+ (NSUInteger)getDBVersion
{
    DebugLog();

    NSString *verstr = [Utils decryptValForKey:Application_DB_Version_Key];
    return [verstr integerValue];
}

/**********************************************************
 Sets DB Version
***********************************************************/

+ (void)setDBVersion:(NSUInteger)version
{
    DebugLog();
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setObject:[Utils encryptVal:[NSString stringWithFormat:@"%d", version]]  forKey:Application_DB_Version_Key];
    [defaults synchronize];    
}

/**********************************************************
 Encrypts the screenname using AES Key based encryption
 and saves it in NSUserDefaults.
 **********************************************************/

+ (void)setScreenname:(NSString *)screenname
{
    DebugLog();
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setValue:[Utils encryptVal:screenname] forKey:kScreenname];
    [defaults synchronize];    
}

/**********************************************************
 Gets the screenname from NSUserDefaults and decrypts it
 before returning
 **********************************************************/

+ (NSString *)getScreenname
{
    DebugLog();
    
    return [Utils decryptValForKey:kScreenname];
}

/**********************************************************
 Encrypts the username using AES Key based encryption
 and saves it in NSUserDefaults.
 **********************************************************/

+ (void)setUsername:(NSString *)username
{
    DebugLog();

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setValue:[Utils encryptVal:username] forKey:kUsername];
    [defaults synchronize];
}

/**********************************************************
 Gets the username from NSUserDefaults and decrypts it before
 returning
 **********************************************************/

+ (NSString *)getUsername
{
   DebugLog();

   return [Utils decryptValForKey:kUsername];
}

/**********************************************************
 Encrypts the password using AES Key based encryption
 and saves it in NSUserDefaults.
 **********************************************************/

+ (void)setPassword:(NSString *)password
{
    DebugLog();

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setValue:[Utils encryptVal:password] forKey:kPassword];
    [defaults synchronize];
}

/**********************************************************
 Gets the username from NSUserDefaults and decrypts it before
 returning
 **********************************************************/

+ (NSString *)getPassword
{
    DebugLog();

    return [Utils decryptValForKey:kPassword];
}

/**********************************************************
 Sets BOOL for a given key from NSUserDefaults
 **********************************************************/

+ (void)setBool:(BOOL)value forKey:(NSString *)key;
{
    DebugLog();

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults setBool:value forKey:key];
    [defaults synchronize];
}

/**********************************************************
 Gets BOOL for a given key from NSUserDefaults
 **********************************************************/

+ (BOOL)boolForKey:(NSString *)key;
{
    DebugLog();

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    return [defaults boolForKey:key];
}

/**********************************************************
 Removes object for a given key from NSUserDefaults
 **********************************************************/

+ (void)removeObjectForKey:(NSString *)key
{
    DebugLog();

    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    [defaults removeObjectForKey:key];
    [defaults synchronize];
}

/**********************************************************
 Returns UIColor for a given action item status code string
***********************************************************/

+ (UIColor *)colorForStatusCode:(NSString *)statusCode;
{    
    if([statusCode isEqualToString:@"open"]){
        return [UIColor colorWithRed:100.0/255.0 green:149.0/255.0 blue:100.0/255.0 alpha:1.0];
    }
    else if ([statusCode isEqualToString:@"past due"]){
        return [UIColor colorWithRed:200.0/255.0 green:50.0/255.0 blue:0.0/255.0 alpha:1.0];
    }
    else if ([statusCode isEqualToString:@"completed"]){
        return [UIColor colorWithRed:149.0/255.0 green:149.0/255.0 blue:149.0/255.0 alpha:1.0];
    }
    else if ([statusCode isEqualToString:@"completed late"]){
        return [UIColor colorWithRed:250.0/255.0 green:150.0/255.0 blue:0.0/255.0 alpha:1.0];
    }
    else if ([statusCode isEqualToString:@"all"]){
        return [UIColor colorWithRed:57.0/255.0 green:171.0/255.0 blue:243.0/255.0 alpha:1.0];
    }    
    
    return [UIColor colorWithRed:255.0/255.0 green:255.0/255.0 blue:255.0/255.0 alpha:1.0];
}

/**********************************************************
 Gets the status for an actionItem with a given dueDate.
 We need to keep refreshing this and cannot rely on db
 values for actionItem status.
 **********************************************************/

+ (NSString *)statusForActionItemWithDueDate:(NSString *)dueDateStr completionDate:(NSString *)completionDateStr
{
    DebugLog();
    
    NSString *status = nil;
    
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:ActionItem_Date_Format];
    
    NSDate *aiDueDate = [formatter dateFromString:dueDateStr];
    
    if(completionDateStr){   
        NSDate *completionDate = [formatter dateFromString:completionDateStr];
        NSTimeInterval interval = [aiDueDate timeIntervalSinceDate:completionDate];        
        status = (interval >= 0)?@"completed":@"completed late";  
    }
    else {
        NSString *str = [formatter stringFromDate:[NSDate date]];
        NSTimeInterval interval = [aiDueDate timeIntervalSinceDate:[formatter dateFromString:str]];
        status = (interval >= 0)?@"open":@"past due";
    }
    
    [formatter release];
    return status;
}

/*********************************************************************************************
 Manages progressHud showing with a given display text
 *********************************************************************************************/

+ (ProgressHUD *)showHudWithText:(NSString *)text
{
    DebugLog();
    
    UIWindow *window = [[UIApplication sharedApplication] keyWindow];
    ProgressHUD *hud = [[ProgressHUD alloc] initWithWindow:window];
    
    // Add HUD to screen
    [window addSubview:hud];
        
    // Show the HUD while the provided method executes in a new thread
    [hud show:YES];
    hud.labelText = text;
    
    return hud;
}

/*********************************************************************************************
 Manages progressHud hiding and release
 *********************************************************************************************/

+ (ProgressHUD *)hideHud:(ProgressHUD *)hud
{
    DebugLog();
    
    if(hud){
        
        hud.delegate = nil;
        [hud removeFromSuperview];
       // [hud release];
        hud = nil;
    }
    
    return hud;
}

/*********************************************************************************************
 Manages progressHud that displays over UIKeyboard level
 *********************************************************************************************/

+ (UIWindow *)showKeyboardOverlayHudWithText:(NSString *)text
{
    DebugLog();
    
    UIWindow *statusWindow = [[UIWindow alloc] initWithFrame:[[UIScreen mainScreen] bounds]];
    [statusWindow setWindowLevel:UIWindowLevelStatusBar];
    [statusWindow setHidden:NO];
    [statusWindow setBackgroundColor:[UIColor clearColor]];
    
    ProgressHUD *hud = [[ProgressHUD alloc] initWithWindow:statusWindow];
    
    // Add HUD to screen
    [statusWindow addSubview:hud];
        
    // Show the HUD while the provided method executes in a new thread
    [hud show:YES];
    [hud setLabelText:text];
    
    return statusWindow;
}

/*********************************************************************************************
 Manages progressHud hiding and release
 *********************************************************************************************/

+ (UIWindow *)hideKeyboardOverlayHud:(UIWindow *)hud
{
    if(hud){
        
        for(UIView *view in [hud subviews]){
            
            if([view isKindOfClass:[ProgressHUD class]]){
                
                [(ProgressHUD *)view setDelegate:nil];
                [(ProgressHUD *)view removeFromSuperview];
                [(ProgressHUD *)view release];
                view = nil;                
            }
        }
        
        [hud removeFromSuperview];
        [hud release];
         hud = nil;
    }
    
    return nil;
}

/*********************************************************************************************
Return current date/Time in a given format as NSString
**********************************************************************************************/

+ (NSString *)getDateStringForA3
{
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];        
    [formatter setDateFormat:Date_Format]; 
    NSString *dateStr = [formatter stringFromDate:[NSDate date]];
    [formatter release];
    return dateStr;
}

/*********************************************************************************************
 Return current date/Time in a given format as NSString
 *********************************************************************************************/

+ (NSString *)getDateStringForMessage
{
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];  
    [formatter setAMSymbol:@"AM"];
    [formatter setPMSymbol:@"PM"];
    [formatter setDateFormat:Message_Date_Format]; 
    NSString *dateStr = [formatter stringFromDate:[NSDate date]];
    [formatter release];
    return dateStr;
}

/*********************************************************************************************
 Returns true if the device is found to be jailbroken. Not being used currently but
 can be used later on if we decide to block jailbroken devices from installing the app.
**********************************************************************************************/

+ (BOOL)isJailBroken
{
    DebugLog();
    
#if TARGET_IPHONE_SIMULATOR
        return NO;
#else
        FILE *f = fopen("/bin/bash", "r");
        
        if (errno == ENOENT)
        {
            // device is NOT jailbroken
            fclose(f);
            return NO;
        }
        else {
            // device IS jailbroken
            fclose(f);
            return YES;
        }
#endif
}

/**********************************************************
 Checks whether a record can be fetched from the server or
 not based on connection/user subcription status
 /records sync status/signed in status. 
 **********************************************************/

+ (int)canFetchA3WithA3Id:(int64_t)a3Id
{
    DebugLog();
    
    int retVal = 0;
    
    retVal = retVal | (([Utils isConnectedToInternet])?kInternetBit:0);
    retVal = retVal | (([Utils isUserSubscriptionActive])?kSubscriptionBit:0);
    retVal = retVal | (([Utils isSyncEnabled])?kSyncEnabledBit:0);
    retVal = retVal | (([Utils isItemPendingSync:a3Id])?kPendingA3Bit:0);

    return retVal;
}

/**********************************************************
 Checks whether a record can be synced based on internet
 connection/user subcription status/signed in status. 
 **********************************************************/

+ (int)canSync
{
    DebugLog();
    
    int retVal = 0;
    
    retVal = retVal | (([Utils isConnectedToInternet])?kInternetBit:0);
    retVal = retVal | (([Utils isUserSubscriptionActive])?kSubscriptionBit:0);
    retVal = retVal | (([Utils isSyncEnabled])?kSyncEnabledBit:0);

    return retVal;
}

/**********************************************************
 Checks whether an item is pending sync.
 **********************************************************/

+ (BOOL)isItemPendingSync:(int64_t)a3Id
{
    DebugLog();
    
    int syncInfoRecordId = kDefault;
    [[DBHandler sharedInstance] syncInfoRecordPresentForA3Id:a3Id syncInfoRecordId:&syncInfoRecordId];
    return (syncInfoRecordId == kDefault)?NO:YES; //if syncInfoRecordId is kDefault, then this item is not pending sync.
}

/**********************************************************
 Checks whether the sync is enabled in settings on top
 left pane
 **********************************************************/

+ (BOOL)isSyncEnabled
{
    DebugLog();
    
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    return [defaults boolForKey:kIsSyncEnabled];
}

/**********************************************************
 Checks whether the logged in user has an 
 active subscription or not
 **********************************************************/

+ (BOOL)isUserSubscriptionActive
{
    DebugLog();
    
    NSString *startDateStr = Nil;
    NSString *endDateStr = Nil;
    
    BOOL success = [[DBHandler sharedInstance] loadSubcriptionStartDate:&startDateStr endDate:&endDateStr];
    
    if(success){
        
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateFormat:Date_Format];
        NSDate *endDate = [formatter dateFromString:endDateStr];
        [formatter release];        
        NSTimeInterval interval = [endDate timeIntervalSinceNow];
        return (interval > 0)?YES:NO;  
    }
    else {
#ifdef DEBUG
        NSAssert((0) , @"Subscription start date/end date could not be fetched from db"); //fatal error
#endif
        return NO;
    }
}

/*****************************************************************
 Returns the span of subscription by doing end date - start date
 *****************************************************************/

+ (NSUInteger)getSubscriptionSpanInDays
{
    DebugLog();
        
    NSString *startDateStr = Nil;
    NSString *endDateStr = Nil;
    
    BOOL success = [[DBHandler sharedInstance] loadSubcriptionStartDate:&startDateStr endDate:&endDateStr];
    
    if(success){
        
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateFormat:Date_Format];
        NSDate *endDate = [formatter dateFromString:endDateStr];
        NSDate *startDate =  [formatter dateFromString:startDateStr];
        [formatter release];
        
        NSTimeInterval interval = [endDate timeIntervalSinceDate:startDate];
        NSUInteger days = (interval > 0)?ceil(interval/(60*60*24)):0;
        
        return days;        
    }
    else {
#ifdef DEBUG
        NSAssert((0) , @"Subscription start date/end date could not be fetched from db"); //fatal error
#endif
        return 0;
    }
}

/**************************************************************
 Returns number of subcription days remaining if subscription
 is active else returns zero. 
 **************************************************************/

+ (NSUInteger)getSubscriptionRemainingDaysCount
{
    DebugLog();
    
    NSString *startDateStr = Nil;
    NSString *endDateStr = Nil;
    
    BOOL success = [[DBHandler sharedInstance] loadSubcriptionStartDate:&startDateStr endDate:&endDateStr];
    
    if(success){
        
        NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
        [formatter setDateFormat:Date_Format];
        NSDate *date = [formatter dateFromString:endDateStr];
        [formatter release];
        
        NSTimeInterval interval = [date timeIntervalSinceNow];
        NSUInteger days = (interval > 0)?ceil(interval/(60*60*24)):0;
        
        return days;        
    }
    else {
#ifdef DEBUG
        NSAssert((0) , @"Subscription start date/end date could not be fetched from db"); //fatal error
#endif
        return 0;
    }
}

/*****************************************************************
 Returns subscription start date
 *****************************************************************/

+ (NSString *)getSubscriptionStartDate
{
    DebugLog();
    
    NSString *startDateStr = Nil;
    NSString *endDateStr = Nil;
    
    BOOL success = [[DBHandler sharedInstance] loadSubcriptionStartDate:&startDateStr endDate:&endDateStr];
    
    if(success){
    return [[startDateStr componentsSeparatedByString:@" "] objectAtIndex:0];
    }
    else {
#ifdef DEBUG
        NSAssert((0) , @"Subscription start date/end date could not be fetched from db"); //fatal error
#endif
        return nil;
    }
}

/*****************************************************************
 Returns subscription end date
 *****************************************************************/

+ (NSString *)getSubscriptionEndDate
{
    DebugLog();
    
    NSString *startDateStr = Nil;
    NSString *endDateStr = Nil;
    
    BOOL success = [[DBHandler sharedInstance] loadSubcriptionStartDate:&startDateStr endDate:&endDateStr];
    
    if(success){
    return [[endDateStr componentsSeparatedByString:@" "] objectAtIndex:0];
    }
    else {
#ifdef DEBUG
        NSAssert((0) , @"Subscription start date/end date could not be fetched from db"); //fatal error
#endif
        return nil;
    }
}

/**********************************************************
 Wraps given html content inside HTML_CONTENT_WRAPPER macro
 **********************************************************/

+ (NSString *)htmlWrappedStringForString:(NSString *)contentString
{
    DebugLog();
    
    return (contentString)?[NSString stringWithFormat:HTML_CONTENT_WRAPPER, IMG_WIDTH, contentString]:nil;    
}

/*******************************************************************
 Wraps given html content inside HTML_EDITABLE_CONTENT_WRAPPER macro
 enabling html edit.
 *******************************************************************/

+ (NSString *)editableHtmlWrappedStringForString:(NSString *)contentString
{
    DebugLog();
    
    return (contentString)?[NSString stringWithFormat:HTML_EDITABLE_CONTENT_WRAPPER, IMG_WIDTH, contentString]:nil;    
}

/**********************************************************
 Wraps given html content inside PDF_HTML_CONTENT_WRAPPER
 macro used for converting an A3 into PDF format
 **********************************************************/

+ (NSString *)pdfHtmlStringForString:(NSString *)contentString headerStr:(NSString *)headerStr
{            
    return (contentString)?[NSString stringWithFormat:[NSString stringWithFormat:@"%@", PDF_HTML_CONTENT_WRAPPER], PDF_WEBVIEW_WIDTH-20, headerStr, PDF_WEBVIEW_WIDTH-20, contentString]:[NSString stringWithFormat:[NSString stringWithFormat:@"%@", PDF_HTML_CONTENT_WRAPPER], PDF_WEBVIEW_WIDTH-40, headerStr, PDF_WEBVIEW_WIDTH-20, @""];    
}

/**********************************************************
 Converts input string into a base64 encoded string.
 This function is used to generate the base64 encoded string
 of username/password combination that we sign each request 
 with instead of using a cookies-session based approach.
 **********************************************************/

+ (NSString *)base64String:(NSString *)str
{
    DebugLog();
    
    NSData *theData = [str dataUsingEncoding: NSASCIIStringEncoding];
    const uint8_t* input = (const uint8_t*)[theData bytes];
    NSInteger length = [theData length];
    
    static char table[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
    
    NSMutableData* data = [NSMutableData dataWithLength:((length + 2) / 3) * 4];
    uint8_t* output = (uint8_t*)data.mutableBytes;
    
    NSInteger i;
    
    for (i=0; i < length; i += 3) {
        NSInteger value = 0;
        NSInteger j;
        
        for (j = i; j < (i + 3); j++) {
            value <<= 8;
            
            if (j < length) {
                value |= (0xFF & input[j]);
            }
        }
        
        NSInteger theIndex = (i / 3) * 4;
        output[theIndex + 0] =                    table[(value >> 18) & 0x3F];
        output[theIndex + 1] =                    table[(value >> 12) & 0x3F];
        output[theIndex + 2] = (i + 1) < length ? table[(value >> 6)  & 0x3F] : '=';
        output[theIndex + 3] = (i + 2) < length ? table[(value >> 0)  & 0x3F] : '=';
    }
    
    return [[[NSString alloc] initWithData:data encoding:NSASCIIStringEncoding] autorelease];
}

/*********************************************************************************************
 Manages string decoding in MessageObj date-time field
 http://stackoverflow.com/questions/1105169/html-character-decoding-in-objective-c-cocoa-touch
 *********************************************************************************************/

+ (NSString *)htmlEncodedStringForString:(NSString *)stringToEncode;
{
    return [stringToEncode stringByEncodingHTMLEntities];
}

/*********************************************************************************************
 Manages string decoding in MessageObj date-time field
 http://stackoverflow.com/questions/1105169/html-character-decoding-in-objective-c-cocoa-touch
 *********************************************************************************************/

+ (NSString *)stringByDecodingXMLEntities:(NSString *)xmlStr
{
    DebugLog();

    NSUInteger myLength = [xmlStr length];
    NSUInteger ampIndex = [xmlStr rangeOfString:@"&" options:NSLiteralSearch].location;
    
    // Short-circuit if there are no ampersands.
    if (ampIndex == NSNotFound) {
        return xmlStr;
    }
    // Make result string with some extra capacity.
    NSMutableString *result = [NSMutableString stringWithCapacity:(myLength * 1.25)];
    
    // First iteration doesn't need to scan to & since we did that already, but for code simplicity's sake we'll do it again with the scanner.
    NSScanner *scanner = [NSScanner scannerWithString:xmlStr];
    
    [scanner setCharactersToBeSkipped:nil];
    
    NSCharacterSet *boundaryCharacterSet = [NSCharacterSet characterSetWithCharactersInString:@" \t\n\r;"];
    
    do {
        // Scan up to the next entity or the end of the string.
        NSString *nonEntityString;
        if ([scanner scanUpToString:@"&" intoString:&nonEntityString]) {
            [result appendString:nonEntityString];
        }
        if ([scanner isAtEnd]) {
            goto finish;
        }
        // Scan either a HTML or numeric character entity reference.
        if ([scanner scanString:@"&amp;" intoString:NULL])
            [result appendString:@"&"];
        else if ([scanner scanString:@"&apos;" intoString:NULL])
            [result appendString:@"'"];
        else if ([scanner scanString:@"&quot;" intoString:NULL])
            [result appendString:@"\""];
        else if ([scanner scanString:@"&lt;" intoString:NULL])
            [result appendString:@"<"];
        else if ([scanner scanString:@"&gt;" intoString:NULL])
            [result appendString:@">"];
        else if ([scanner scanString:@"&#" intoString:NULL]) {
            BOOL gotNumber;
            unsigned charCode;
            NSString *xForHex = @"";
            
            // Is it hex or decimal?
            if ([scanner scanString:@"x" intoString:&xForHex]) {
                gotNumber = [scanner scanHexInt:&charCode];
            }
            else {
                gotNumber = [scanner scanInt:(int*)&charCode];
            }
            
            if (gotNumber) {
                [result appendFormat:@"%C", charCode];
                [scanner scanString:@";" intoString:NULL];
            }
            else {
                NSString *unknownEntity = @"";
                [scanner scanUpToCharactersFromSet:boundaryCharacterSet intoString:&unknownEntity];
                [result appendFormat:@"&#%@%@", xForHex, unknownEntity];                
                DebugLog(@"Expected numeric character entity but got &#%@%@;", xForHex, unknownEntity);
            }
        }
        else {
            NSString *amp;
            [scanner scanString:@"&" intoString:&amp];      //an isolated & symbol
            [result appendString:amp];            
        }
    }
    while (![scanner isAtEnd]);
    
finish:
    return result;
}

/*********************************************************************************************
 Manages html string decoding in MessageObj content field
 *********************************************************************************************/

+ (NSString *)stringByDecodingHTMLEntities:(NSString *)htmlStr
{
    DebugLog();

    return [htmlStr stringByDecodingHTMLEntities];
}

/*********************************************************************************************
 Javascript which when executed on a UIWebView extracts <img tags from the loaded html
 and returns the <img src values as a comma seperated string. It is used for caching
 embedded images in A3 Section Content
 *********************************************************************************************/

+ (NSString *)jsForExtractingImageURL
{
    //the ||| separator is added because there could be all sorts of wierd characters in URL's. We cannot trust them.
    
    return [NSString stringWithFormat:@"var n = document.images.length; var names = [];"
            "for (var i = 0; i < n; i++) {"
            "names.push(\"%@\"+document.images[i].src);"
            "} String(names);", IMG_URL_SEPARATOR];
}

/*********************************************************************************************
 Javascript which when executed on a UIWebView replaces <img src attribute from a server url
 to local file path of cached resource for the corresponding url. We exploit the fact that
 resource urls are unique and cache the resources on disk for accessing in offline mode. 
 When an a3 is accessed in offline mode, we need to flip the resource urls to point to our
 images cached on the disk.
 *********************************************************************************************/

+ (NSString *)jsForReplacingURLS:(NSString *)json
{
    return  [NSString stringWithFormat:@"function replace(str){var n = document.images.length;"
             "for (var i = 0; i < n; i++){"
             "document.images[i].setAttribute(\"src\", str.urls[i]);"
             "}} replace(%@);", json];
}


/*********************************************************************************************
 Javascript which when executed on a UIWebView replaces <img src attribute from a server url
 to local file path of cached resource for the corresponding url. We exploit the fact that
 resource urls are unique and cache the resources on disk for accessing in offline mode. 
 When an a3 is accessed in offline mode, we need to flip the resource urls to point to our
 images cached on the disk.
 *********************************************************************************************/

+ (NSString *)jsForFlippingHostedURLSToLocalURLS:(NSString *)json
{
    return [NSString stringWithFormat:@"function replace(str){var n = document.images.length;"
                      "for (var i = 0; i < n; i++){"
                      "document.images[i].setAttribute(\"src\", str[i].localURL);"
                      "}} replace(%@);", json];        
}

/*********************************************************************************************
 Javascript which when executed on a UIWebView replaces <img src attribute from local file
 path of cached resource to a server url.
 *********************************************************************************************/

+ (NSString *)jsForFlippingLocalURLSToHostedURLS:(NSString *)json
{
    NSString *str =  [NSString stringWithFormat:@"function replace(str){var n = document.images.length;"
             "for (var i = 0; i < n; i++){"                      
               "for (var j = 0; j < str.length; j++){"
                      "if((document.images[i].getAttribute(\"src\") == str[j].localURL) || (document.images[i].getAttribute(\"src\") == str[j].hostedURL)){"
                            "document.images[i].setAttribute(\"src\", str[j].relURL);}"
             "}}} replace(%@);", json];
    
    return str;
}

/*********************************************************************************************
 Javascript for setting image size attribute after it has been inserted
 into section content.
 *********************************************************************************************/

+ (NSString *)jsForAddingSizeAttrForInsertedImage
{
    return @"var n = document.images.length;"
    "for (var i = 0; i < n; i++) {"
    "if(document.images[i].getAttribute(\"src\") == \"%@\"){"
    "document.images[i].setAttribute(\"width\", %f);"
    "document.images[i].setAttribute(\"height\", %f);"
    "break;}}";
}

/*********************************************************************************************
 Javascript for adding an event listener that can correctly identify when
 an image inside a UIWebView and other resources have completed loading.
 UIWebView didFinishLoading delegate method is not too reliable in this aspect. The
 delegate callback gets issued even when images inside the webView are still loading.
 *********************************************************************************************/

//this function is not used but looks useful for future. Let it be.

+ (NSString *)jsForAddingEventListenerForWebviewFinishLoad
{
    DebugLog();
 
    //"document.location.href = \"https://www.google.co.in/\";"

    return @"var script = document.createElement('script');"
    "script.type = 'text/javascript';"      
    "script.text = 'function DOMReady() {document.location.href = \"https://www.google.co.in/\";}';"
    "function addScript(){"
    "document.getElementsByTagName(\'body\')[0].appendChild(script);"
    "document.addEventListener('DOMContentLoaded', DOMReady, false);"
    "}addScript();";
}

/*********************************************************************************************
 Javascript for removing spurios <br> added while allowing section content edit.
 *********************************************************************************************/

+ (NSString *)jsForRemovingSpuriousBreaks
{
    return @"function removeElementsByClass(className){"
    "elements = document.getElementsByClassName(className);"
    "while(elements.length > 0){"
    "elements[0].parentNode.removeChild(elements[0]);"
    "}} removeElementsByClass(\"spur\");";
}

/*********************************************************************************************
 Javascript for modifying dummyImage.
 *********************************************************************************************/

+ (NSString *)jsForModifyingImageWithURL:(NSString *)imgURL attributes:(NSDictionary *)attributes
{
    NSString *src = [attributes objectForKey:@"src"];
    CGFloat height = [[attributes objectForKey:@"height"] floatValue];
    CGFloat width = [[attributes objectForKey:@"width"] floatValue];
    NSString *drawingJSON = [attributes objectForKey:@"drawing"];
    
    NSMutableString *str = [[NSMutableString alloc] initWithString:[NSString stringWithFormat:@"var n = document.images.length;"
                                                                    "for (var i = 0; i < n; i++){"
                                                                    "var element = document.images[i];"
                                                                    "if(element.getAttribute(\"src\") == \"%@\"){"
                                                                    "element.setAttribute(\"src\", \"%@\");"
                                                                    "element.setAttribute(\"width\", \"%f\");"
                                                                    "element.setAttribute(\"height\", \"%f\");",imgURL, src, width, height]];    
    if(drawingJSON){
        [str appendString:[NSString stringWithFormat:@"element.setAttribute(\"drawing\", \"%@\");", drawingJSON]];
    }
    
    [str appendString:@"break;}}"];
        
    return [str autorelease];
}

/*********************************************************************************************
 Javascript for deleting image
 *********************************************************************************************/

+ (NSString *)jsForDeletingImageWithURL:(NSString *)srcURL
{
    NSString *str =  [NSString stringWithFormat:@"var n = document.images.length;"
                      "for (var i = 0; i < n; i++){"                      
                      "if(document.images[i].getAttribute(\"src\") == \"%@\"){"
                      "var el = document.images[i];"
                      "var remElement = (el.parentNode).removeChild(el);"
                      "break;}}", srcURL];
    
    return str;
}

/*********************************************************************************************
 Javascript for resizing image
 *********************************************************************************************/

+ (NSString *)jsForResizingImageWithURL:(NSString *)srcURL size:(CGSize)newSize
{
    NSString *str =  [NSString stringWithFormat:@"var n = document.images.length;"
                      "for (var i = 0; i < n; i++){"    
                      "var element = document.images[i];"
                      "if(element.getAttribute(\"src\") == \"%@\"){"
                      "var x = element.style.width;"
                      "if(x){"
                      "element.style.width = \"%.0fpx\";"
                      "element.style.height = \"%.0fpx\";"
                      "}else{"
                      "element.setAttribute(\"width\", \"%f\");"
                      "element.setAttribute(\"height\", \"%f\");"
                      "}"
                      "break;}}", srcURL, newSize.width, newSize.height, newSize.width, newSize.height];
    return str;
}

/*********************************************************************************************
 Javascript for getting image height and width for given srcURL
 *********************************************************************************************/

+ (NSString *)jsForGettingImageDimensions:(NSString *)srcURL
{
    NSString *str =  [NSString stringWithFormat:@"var n = document.images.length;"
                      "for (var i = 0; i < n; i++){"
                      "var element = document.images[i];"
                      "var dims = [];"
                      "if(element.getAttribute(\"src\") == \"%@\"){"
                      "var x = element.style.width;"
                      "if(x){"
                      "dims.push(x);"
                      "dims.push(element.style.height);"
                      "}else{"
                      "dims.push(element.getAttribute(\"width\"));"
                      "dims.push(element.getAttribute(\"height\"));"
                      "}"
                      "break;}} String(dims);", srcURL];
    return str;
}

/*********************************************************************************************
 Javascript for moving image
 *********************************************************************************************/

+ (NSString *)jsForDraggingImageFromPoint:(CGPoint)initialPoint toPoint:(CGPoint)finalPoint
{
    DebugLog();

    if(finalPoint.x < 0 || finalPoint.y < 0){
        return nil;
    }
    
    NSString *str = [NSString stringWithFormat:@"function moveImageAtTo(x, y, newX, newY) {"
                     
                     // Get our required variables
                     "var element  = document.elementFromPoint(x, y);"
                     
                     // Attempt to move an image which doesn't exist at the point
                     "if (element.toString().indexOf('Image') == -1)"
                     "return;"
                     "var caretRange = document.caretRangeFromPoint(newX, newY);"
                     "var selection = window.getSelection();"
                     
                     // Save the image source so we know this later when we need to re-insert it
                     "var imageSrc = element.src;"
                     
                     // Set the selection to the range of the image, so we can delete it
                     "var nodeRange = document.createRange();"
                     "nodeRange.selectNode(element);"
                     "selection.removeAllRanges();"
                     "selection.addRange(nodeRange);"
                                          
                     // Delete the image
                     "document.execCommand('delete');"
                     
                     // Set the selection to the caret range, so we can then add the image
                     "var selection = window.getSelection();"
                     "var range = document.createRange();"
                     "selection.removeAllRanges();"
                     "selection.addRange(caretRange);"
                     
                     // Re-insert the image
                     "document.execCommand('insertImage', false, imageSrc);"
                     
                     // Add size attrs
                     "var n = document.images.length;"
                     "for (var i = 0; i < n; i++) {"
                     "var newElement  = document.images[i];"
                     "if(newElement.getAttribute(\"src\") == imageSrc){"
                     "var tmp = element.cloneNode(true);"
                     "newElement.parentNode.replaceChild(tmp, newElement);"
                     
                     // Add eventListener
//                     "tmp.addEventListener('mousedown', function(){"
//                     "movingImage = tmp.getAttribute(\"src\");"
//                     "window.location.href = \"%@\";}, false);"
                     "break;}}}"
                     
                     "moveImageAtTo(%f, %f, %f, %f);", initialPoint.x, initialPoint.y, finalPoint.x, finalPoint.y];
    
    return str;
}

/*********************************************************************************************
 Javascript for adding event listeners to all <img>
 *********************************************************************************************/

+ (NSString *)jsForAddingEventListenersToImages
{
    DebugLog();
    
    NSString *str =  [NSString stringWithFormat:@"var tmp = document.getElementById('mobile_edit');"
                     "tmp.setAttribute(\"contenteditable\", \"false\");"
                     "var all_images = document.getElementsByTagName(\"img\");"
                     "for (var i = 0; i < all_images.length; i++) {"
                     "var element = all_images[i];"
                     "element.addEventListener('mousedown', function(){"
                     "movingImage = element.getAttribute(\"src\");"
                     "window.location.href = \"%@\";}, false);"
                     "}", Custom_Image_URL];    
    return str;
}

/*********************************************************************************************
 Javascript for adding event listeners to an <img> with givensrcURL
 *********************************************************************************************/

+ (NSString *)jsForAddingEventListenersToImageWithURL:(NSString *)srcURL
{
    DebugLog();
    
    NSString *str =  [NSString stringWithFormat:@"var tmp = document.getElementById('mobile_edit');"
                      "tmp.setAttribute(\"contenteditable\", \"false\");"
                      "var all_images = document.getElementsByTagName(\"img\");"
                      "for (var i = 0; i < all_images.length; i++) {"
                      "var element = all_images[i];"
                      "if(element.getAttribute(\"src\") == \"%@\"){"
                      "element.addEventListener('mousedown', function(){"
                      "movingImage = element.getAttribute(\"src\");"
                      "window.location.href = \"%@\";}, false);"
                      "break;}"
                      "}", srcURL, Custom_Image_URL];
    return str;
}

/*********************************************************************************************
 Javascript for getting moving image
 *********************************************************************************************/

+ (NSString *)jsForGettingMovingImage
{
    DebugLog();
    
    return @"String(movingImage);";
}

/*********************************************************************************************
 Javascript for fetching drawing json of longpressed drawing
 *********************************************************************************************/

+ (NSString *)jsForGettingDrawingJSONForImage:(NSString *)srcURL
{
    DebugLog();
    
    NSString *str = [NSString stringWithFormat:@"var n = document.images.length;"
                     "for (var i = 0; i < n; i++){"
                     "var element = document.images[i];"
                     "var str;"
                     "if(element.getAttribute(\"src\") == \"%@\"){"
                     "str = element.getAttribute(\"drawing\");"
                     "break;} String(str);}", srcURL ];
    return str;
}

/*********************************************************************************************
 Javascript for fetching offset of longpressed drawing
 *********************************************************************************************/

+ (NSString *)jsForGettingOffsetForImage:(NSString *)srcURL
{
    DebugLog();

    NSString *str = [NSString stringWithFormat:@"var n = document.images.length;"
                     "for (var i = 0; i < n; i++){"
                     "var element = document.images[i];"
                     "var offsetTop;"
                     "if(element.getAttribute(\"src\") == \"%@\"){"
                     "offsetTop = element.offsetTop;"
                     "break;} String(offsetTop);}", srcURL ];
    return str;
}

/*********************************************************************************************
 Does an MD5 hasing of string
 *********************************************************************************************/

+ (NSString*)hashedString:(NSString*)str
{
    DebugLog();
    
	const char *cStr = [str UTF8String];
	unsigned char result[CC_MD5_DIGEST_LENGTH];
	CC_MD5( cStr, strlen(cStr), result );
	
	return [NSString stringWithFormat:@"%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X",result[0], result[1], result[2], result[3], result[4], result[5], result[6], result[7],
			result[8], result[9], result[10], result[11], result[12], result[13], result[14], result[15]
			];
}

/*********************************************************************************************
 Method to generate unique strings to be used for caching resources locally until
 they are synced with the server.
 *********************************************************************************************/

+ (NSString *)getUniqueString
{
    DebugLog();
    
    NSString *retStr = nil;
    
    // Create universally unique identifier (object)
    CFUUIDRef uuidObject = CFUUIDCreate(kCFAllocatorDefault);
    
    if(uuidObject)
    {
        // Get the string representation of CFUUID object.
        retStr = [(NSString *)CFUUIDCreateString(kCFAllocatorDefault, uuidObject) autorelease];
        
        // If needed, here is how to get a representation in bytes, returned as a structure
        // typedef struct {
        //   UInt8 byte0;
        //   UInt8 byte1;
        //   ...
        //   UInt8 byte15;
        // } CFUUIDBytes;
            
        CFRelease(uuidObject);
    }
    return retStr;
}

/*********************************************************************************************
 Method to get app version number from info.plist file.
 *********************************************************************************************/

+ (NSString *)getAppVersionFromPlist
{
    NSDictionary* infoDict = [[NSBundle mainBundle] infoDictionary];
    return [infoDict objectForKey:@"CFBundleVersion"];
}

+ (NSString *)getPDFTempPath{
    DebugLog();
    
    NSArray *dirArray = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,    NSUserDomainMask, YES);
    NSString *tempPath =[NSString stringWithFormat:@"%@/tmp/test.zip", [dirArray objectAtIndex:0]];
    
    NSFileManager *fileMgr = [NSFileManager defaultManager];
    if ([fileMgr fileExistsAtPath:tempPath]) {
        [fileMgr removeItemAtPath:tempPath error:nil];
    }
    
    return tempPath;
    
}

@end
